class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode(int val) {
        this.val = val;
    }
}

class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        HashMap<Integer, Integer> inorderMap = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) {
            inorderMap.put(inorder[i], i);
        }

        return buildTreeHelper(inorder, 0, inorder.length - 1,
                               postorder, 0, postorder.length - 1,
                               inorderMap);
    }

    private TreeNode buildTreeHelper(int[] inorder, int inStart, int inEnd,
                                     int[] postorder, int postStart, int postEnd,
                                     HashMap<Integer, Integer> inorderMap) {
        if (inStart > inEnd || postStart > postEnd) {
            return null;
        }

        int rootVal = postorder[postEnd];
        TreeNode root = new TreeNode(rootVal);

        int rootIndexInorder = inorderMap.get(rootVal);
        int leftSubtreeSize = rootIndexInorder - inStart;

        root.left = buildTreeHelper(inorder, inStart, rootIndexInorder - 1,
                                    postorder, postStart, postStart + leftSubtreeSize - 1,
                                    inorderMap);
        root.right = buildTreeHelper(inorder, rootIndexInorder + 1, inEnd,
                                     postorder, postStart + leftSubtreeSize, postEnd - 1,
                                     inorderMap);

        return root;
    }
}
