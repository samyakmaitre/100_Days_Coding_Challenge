import java.util.*;

class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
        List<Integer> result = new ArrayList<>();
        
        if (s == null || s.length() == 0 || words == null || words.length == 0) {
            return result;
        }
        
        int wordLength = words[0].length();
        int totalWords = words.length;
        int concatLength = wordLength * totalWords;
        
        Map<String, Integer> wordFreq = new HashMap<>();
        for (String word : words) {
            wordFreq.put(word, wordFreq.getOrDefault(word, 0) + 1);
        }
        
        for (int i = 0; i <= s.length() - concatLength; i++) {
            Map<String, Integer> seenWords = new HashMap<>();
            int j = 0;
            
            while (j < totalWords) {
                String currentWord = s.substring(i + j * wordLength, i + (j + 1) * wordLength);
                
                if (!wordFreq.containsKey(currentWord)) {
                    break;
                }
                
                seenWords.put(currentWord, seenWords.getOrDefault(currentWord, 0) + 1);
                
                if (seenWords.get(currentWord) > wordFreq.get(currentWord)) {
                    break;
                }
                
                j++;
            }
            
            if (j == totalWords) {
                result.add(i);
            }
        }
        
        return result;
    }
}
